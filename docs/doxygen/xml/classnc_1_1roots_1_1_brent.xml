<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="classnc_1_1roots_1_1_brent" kind="class" language="C++" prot="public">
    <compoundname>nc::roots::Brent</compoundname>
    <basecompoundref refid="classnc_1_1roots_1_1_iteration" prot="public" virt="non-virtual">nc::roots::Iteration</basecompoundref>
    <includes refid="_brent_8hpp" local="no">Brent.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classnc_1_1roots_1_1_brent_1a457fa62c9783bb13b313c35a8918bd61" prot="private" static="no" mutable="no">
        <type>const std::function&lt; double(double)&gt;</type>
        <definition>const std::function&lt;double(double)&gt; nc::roots::Brent::f_</definition>
        <argsstring></argsstring>
        <name>f_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Roots/Brent.hpp" line="158" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Roots/Brent.hpp" bodystart="158" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classnc_1_1roots_1_1_brent_1aa9f4cea2c2770c669e84158186b075c2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nc::roots::Brent::Brent</definition>
        <argsstring>(const double epsilon, const std::function&lt; double(double)&gt; &amp;f) noexcept</argsstring>
        <name>Brent</name>
        <param>
          <type>const double</type>
          <declname>epsilon</declname>
        </param>
        <param>
          <type>const std::function&lt; double(double)&gt; &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>epsilon</parametername>
</parameternamelist>
<parameterdescription>
<para>the epsilon value </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>the function </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Roots/Brent.hpp" line="61" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Roots/Brent.hpp" bodystart="61" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1roots_1_1_brent_1abf26bf1c5ace791386f2c0f6a91f57bb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nc::roots::Brent::Brent</definition>
        <argsstring>(const double epsilon, const uint32 maxNumIterations, const std::function&lt; double(double)&gt; &amp;f) noexcept</argsstring>
        <name>Brent</name>
        <param>
          <type>const double</type>
          <declname>epsilon</declname>
        </param>
        <param>
          <type>const <ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref></type>
          <declname>maxNumIterations</declname>
        </param>
        <param>
          <type>const std::function&lt; double(double)&gt; &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>epsilon</parametername>
</parameternamelist>
<parameterdescription>
<para>the epsilon value </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxNumIterations</parametername>
</parameternamelist>
<parameterdescription>
<para>the maximum number of iterations to perform </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>the function </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Roots/Brent.hpp" line="75" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Roots/Brent.hpp" bodystart="75" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1roots_1_1_brent_1a1234c20d17644a94cac2700d7b6558c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nc::roots::Brent::~Brent</definition>
        <argsstring>() noexcept override=default</argsstring>
        <name>~Brent</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destructor </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Roots/Brent.hpp" line="86" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1roots_1_1_iteration_1ab3192d0f9de4b8b27b23013c65489e5a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref></type>
        <definition>uint32 nc::roots::Iteration::numIterations</definition>
        <argsstring>() const noexcept</argsstring>
        <name>numIterations</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the number of iterations</para><para><simplesect kind="return"><para>: number of iterations </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Roots/Iteration.hpp" line="84" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Roots/Iteration.hpp" bodystart="84" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1roots_1_1_brent_1a3853981ca1113723006b6627d96d378b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double nc::roots::Brent::solve</definition>
        <argsstring>(double a, double b)</argsstring>
        <name>solve</name>
        <param>
          <type>double</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Solves for the root in the range [a, b]</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>the lower bound </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>the upper bound </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>root between the bound </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Roots/Brent.hpp" line="96" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Roots/Brent.hpp" bodystart="96" bodyend="154"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classnc_1_1roots_1_1_brent_1a0713cc1d7f5a8ae53de6e6ca37cb97e9" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double nc::roots::Brent::calculateBisection</definition>
        <argsstring>(const double a, const double b) const noexcept</argsstring>
        <name>calculateBisection</name>
        <param>
          <type>const double</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculates the bisection point</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>the lower bound </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>the upper bound </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>x </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Roots/Brent.hpp" line="168" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Roots/Brent.hpp" bodystart="168" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1roots_1_1_brent_1a5ab8fd93862694ea0614d92de7b01faa" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double nc::roots::Brent::calculateInverseQuadraticInterpolation</definition>
        <argsstring>(const double a, const double b, const double lastB, const double fa, const double fb, const double lastFb) const noexcept</argsstring>
        <name>calculateInverseQuadraticInterpolation</name>
        <param>
          <type>const double</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>lastB</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>fa</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>fb</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>lastFb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculates the inverse quadratic interpolation</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>the lower bound </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>the upper bound </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lastB</parametername>
</parameternamelist>
<parameterdescription>
<para>the previous upper bound </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fa</parametername>
</parameternamelist>
<parameterdescription>
<para>the function evaluated at a </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fb</parametername>
</parameternamelist>
<parameterdescription>
<para>the function evaluated at b </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lastFb</parametername>
</parameternamelist>
<parameterdescription>
<para>the previous function evaluated at the upper bound </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the inverse quadratic interpolation </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Roots/Brent.hpp" line="201" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Roots/Brent.hpp" bodystart="201" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1roots_1_1_brent_1a1ba9fa418a4b85626faee5812b17a714" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double nc::roots::Brent::calculateSecant</definition>
        <argsstring>(const double a, const double b, const double fa, const double fb) const noexcept</argsstring>
        <name>calculateSecant</name>
        <param>
          <type>const double</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>fa</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>fb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculates the secant point</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>the lower bound </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>the upper bound </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fa</parametername>
</parameternamelist>
<parameterdescription>
<para>the function evaluated at a </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fb</parametername>
</parameternamelist>
<parameterdescription>
<para>the function evaluated at b </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the secant point </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Roots/Brent.hpp" line="183" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Roots/Brent.hpp" bodystart="183" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1roots_1_1_brent_1aa43775b08de6539af0fc072a68480762" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nc::roots::Brent::checkAndFixAlgorithmCriteria</definition>
        <argsstring>(double &amp;a, double &amp;b, double &amp;fa, double &amp;fb) noexcept</argsstring>
        <name>checkAndFixAlgorithmCriteria</name>
        <param>
          <type>double &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>fa</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>fb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Checks the algorithm criteria</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>the lower bound </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>the upper bound </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fa</parametername>
</parameternamelist>
<parameterdescription>
<para>the function evaluated at a </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fb</parametername>
</parameternamelist>
<parameterdescription>
<para>the function evaluated at b </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Roots/Brent.hpp" line="232" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Roots/Brent.hpp" bodystart="232" bodyend="240"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1roots_1_1_brent_1ab13f9c83d1d5cf78345a801afc213dc5" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool nc::roots::Brent::useBisection</definition>
        <argsstring>(const bool bisection, const double b, const double lastB, const double penultimateB, const double s) const</argsstring>
        <name>useBisection</name>
        <param>
          <type>const bool</type>
          <declname>bisection</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>lastB</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>penultimateB</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Uses the bisection</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bisection</parametername>
</parameternamelist>
<parameterdescription>
<para>the bisection point </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>the upper bound </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lastB</parametername>
</parameternamelist>
<parameterdescription>
<para>the previous upper bound </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>penultimateB</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Roots/Brent.hpp" line="253" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Roots/Brent.hpp" bodystart="253" bodyend="262"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1roots_1_1_brent_1a07aa18c32db46e63c2db82357ea127e7" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool nc::roots::Brent::useInverseQuadraticInterpolation</definition>
        <argsstring>(const double fa, const double fb, const double lastFb) const noexcept</argsstring>
        <name>useInverseQuadraticInterpolation</name>
        <param>
          <type>const double</type>
          <declname>fa</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>fb</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>lastFb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Uses the inverse quadratic interpolation</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fa</parametername>
</parameternamelist>
<parameterdescription>
<para>the function evaluated at a </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fb</parametername>
</parameternamelist>
<parameterdescription>
<para>the function evaluated at b </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lastFb</parametername>
</parameternamelist>
<parameterdescription>
<para>the previous function evaluated at the upper bound </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Roots/Brent.hpp" line="218" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Roots/Brent.hpp" bodystart="218" bodyend="221"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classnc_1_1roots_1_1_iteration_1a5eafe219bb90f82da4ece84f012a411a" prot="protected" static="no" mutable="no">
        <type>const double</type>
        <definition>const double nc::roots::Iteration::epsilon_</definition>
        <argsstring></argsstring>
        <name>epsilon_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Roots/Iteration.hpp" line="115" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Roots/Iteration.hpp" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnc_1_1roots_1_1_iteration_1a9b1c4ea8cf91c5308020c105293b4a02" prot="protected" static="no" mutable="no">
        <type><ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref></type>
        <definition>uint32 nc::roots::Iteration::maxNumIterations_</definition>
        <argsstring></argsstring>
        <name>maxNumIterations_</name>
        <initializer>{1000}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Roots/Iteration.hpp" line="116" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Roots/Iteration.hpp" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnc_1_1roots_1_1_iteration_1a84d7f2f7412d1f54861edeacc7bc0c20" prot="protected" static="no" mutable="no">
        <type><ref refid="namespacenc_1aacba4d66f94f6f53637e23c5d82e20d8" kindref="member">uint32</ref></type>
        <definition>uint32 nc::roots::Iteration::numIterations_</definition>
        <argsstring></argsstring>
        <name>numIterations_</name>
        <initializer>{0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Roots/Iteration.hpp" line="117" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Roots/Iteration.hpp" bodystart="117" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classnc_1_1roots_1_1_iteration_1ae0ee7814d1fac03c4c91947f839ea401" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nc::roots::Iteration::incrementNumberOfIterations</definition>
        <argsstring>() noexcept</argsstring>
        <name>incrementNumberOfIterations</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Incraments the number of iterations</para><para><simplesect kind="return"><para>the number of iterations prior to incramenting </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Roots/Iteration.hpp" line="105" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Roots/Iteration.hpp" bodystart="105" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="classnc_1_1roots_1_1_iteration_1a85e79a4794bc3a6ac6bc3564956737a2" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nc::roots::Iteration::resetNumberOfIterations</definition>
        <argsstring>() noexcept</argsstring>
        <name>resetNumberOfIterations</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Resets the number of iterations </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Roots/Iteration.hpp" line="94" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Roots/Iteration.hpp" bodystart="94" bodyend="97"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><ref refid="classnc_1_1roots_1_1_brent" kindref="compound">Brent</ref> root finding method </para>    </detaileddescription>
    <inheritancegraph>
      <node id="50">
        <label>nc::roots::Iteration</label>
        <link refid="classnc_1_1roots_1_1_iteration"/>
      </node>
      <node id="49">
        <label>nc::roots::Brent</label>
        <link refid="classnc_1_1roots_1_1_brent"/>
        <childnode refid="50" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="52">
        <label>nc::roots::Iteration</label>
        <link refid="classnc_1_1roots_1_1_iteration"/>
      </node>
      <node id="51">
        <label>nc::roots::Brent</label>
        <link refid="classnc_1_1roots_1_1_brent"/>
        <childnode refid="52" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Roots/Brent.hpp" line="52" column="1" bodyfile="C:/Users/pilgeda/Documents/GitHub/NumCpp/include/NumCpp/Roots/Brent.hpp" bodystart="51" bodyend="263"/>
    <listofallmembers>
      <member refid="classnc_1_1roots_1_1_brent_1aa9f4cea2c2770c669e84158186b075c2" prot="public" virt="non-virtual"><scope>nc::roots::Brent</scope><name>Brent</name></member>
      <member refid="classnc_1_1roots_1_1_brent_1abf26bf1c5ace791386f2c0f6a91f57bb" prot="public" virt="non-virtual"><scope>nc::roots::Brent</scope><name>Brent</name></member>
      <member refid="classnc_1_1roots_1_1_brent_1a0713cc1d7f5a8ae53de6e6ca37cb97e9" prot="private" virt="non-virtual"><scope>nc::roots::Brent</scope><name>calculateBisection</name></member>
      <member refid="classnc_1_1roots_1_1_brent_1a5ab8fd93862694ea0614d92de7b01faa" prot="private" virt="non-virtual"><scope>nc::roots::Brent</scope><name>calculateInverseQuadraticInterpolation</name></member>
      <member refid="classnc_1_1roots_1_1_brent_1a1ba9fa418a4b85626faee5812b17a714" prot="private" virt="non-virtual"><scope>nc::roots::Brent</scope><name>calculateSecant</name></member>
      <member refid="classnc_1_1roots_1_1_brent_1aa43775b08de6539af0fc072a68480762" prot="private" virt="non-virtual"><scope>nc::roots::Brent</scope><name>checkAndFixAlgorithmCriteria</name></member>
      <member refid="classnc_1_1roots_1_1_iteration_1a5eafe219bb90f82da4ece84f012a411a" prot="protected" virt="non-virtual"><scope>nc::roots::Brent</scope><name>epsilon_</name></member>
      <member refid="classnc_1_1roots_1_1_brent_1a457fa62c9783bb13b313c35a8918bd61" prot="private" virt="non-virtual"><scope>nc::roots::Brent</scope><name>f_</name></member>
      <member refid="classnc_1_1roots_1_1_iteration_1ae0ee7814d1fac03c4c91947f839ea401" prot="protected" virt="non-virtual"><scope>nc::roots::Brent</scope><name>incrementNumberOfIterations</name></member>
      <member refid="classnc_1_1roots_1_1_iteration_1a2d7285a81c033d56ce8283b6dbfca136" prot="public" virt="non-virtual"><scope>nc::roots::Brent</scope><name>Iteration</name></member>
      <member refid="classnc_1_1roots_1_1_iteration_1a7948f08cfaa01f5685ec35149bf6bba0" prot="public" virt="non-virtual"><scope>nc::roots::Brent</scope><name>Iteration</name></member>
      <member refid="classnc_1_1roots_1_1_iteration_1a9b1c4ea8cf91c5308020c105293b4a02" prot="protected" virt="non-virtual"><scope>nc::roots::Brent</scope><name>maxNumIterations_</name></member>
      <member refid="classnc_1_1roots_1_1_iteration_1ab3192d0f9de4b8b27b23013c65489e5a" prot="public" virt="non-virtual"><scope>nc::roots::Brent</scope><name>numIterations</name></member>
      <member refid="classnc_1_1roots_1_1_iteration_1a84d7f2f7412d1f54861edeacc7bc0c20" prot="protected" virt="non-virtual"><scope>nc::roots::Brent</scope><name>numIterations_</name></member>
      <member refid="classnc_1_1roots_1_1_iteration_1a85e79a4794bc3a6ac6bc3564956737a2" prot="protected" virt="non-virtual"><scope>nc::roots::Brent</scope><name>resetNumberOfIterations</name></member>
      <member refid="classnc_1_1roots_1_1_brent_1a3853981ca1113723006b6627d96d378b" prot="public" virt="non-virtual"><scope>nc::roots::Brent</scope><name>solve</name></member>
      <member refid="classnc_1_1roots_1_1_brent_1ab13f9c83d1d5cf78345a801afc213dc5" prot="private" virt="non-virtual"><scope>nc::roots::Brent</scope><name>useBisection</name></member>
      <member refid="classnc_1_1roots_1_1_brent_1a07aa18c32db46e63c2db82357ea127e7" prot="private" virt="non-virtual"><scope>nc::roots::Brent</scope><name>useInverseQuadraticInterpolation</name></member>
      <member refid="classnc_1_1roots_1_1_brent_1a1234c20d17644a94cac2700d7b6558c0" prot="public" virt="non-virtual"><scope>nc::roots::Brent</scope><name>~Brent</name></member>
      <member refid="classnc_1_1roots_1_1_iteration_1a96da5e3dedbc74efa97e91cf387cdaca" prot="public" virt="virtual"><scope>nc::roots::Brent</scope><name>~Iteration</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
